{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "subscriptionId": { "type": "string" },
    "tenant": { "type": "string" },
    "name": { "type": "string" },
    "location": { "type": "string" },
    "use32BitWorkerProcess": { "type": "bool" },
    "ftpsState": { "type": "string" },
    "storageAccountName": { "type": "string" },
    "linuxFxVersion": { "type": "string" },
    "environmentName": { "type": "string" },
    "workspaceName": { "type": "string" },
    "workspaceLocation": { "type": "string" },
    "workloadProfileName": { "type": "string" },
    "resourceConfig": { "type": "object" },
    "keyVaultName": { "type": "string" },
    "KeyVaultConfig__Url": { "type": "string" }
  },
  "variables": {},
  "resources": [
    // Function App
    {
      "apiVersion": "2022-03-01",
      "name": "[parameters('name')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp,linux,container,azurecontainerapps",
      "location": "[parameters('location')]",
      "tags": {
        "hidden-link: /app-insights-resource-id": "[resourceId(resourceGroup().name, 'Microsoft.Insights/components', 'webscrapper-function')]"
      },
      "dependsOn": [
        "[resourceId(resourceGroup().name, 'Microsoft.Insights/components', 'webscrapper-function')]",
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
        "[resourceId(resourceGroup().name, 'Microsoft.App/managedEnvironments', parameters('environmentName'))]",
        "[resourceId(resourceGroup().name, 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
        //"[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "name": "[parameters('name')]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Insights/components', 'webscrapper-function'), '2015-05-01').ConnectionString]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').keys[0].value, ';EndpointSuffix=', 'core.windows.net')]"
            },
            {
              "name": "KeyVaultConfig__Url",
              "value": "[parameters('KeyVaultConfig__Url')]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "ftpsState": "[parameters('ftpsState')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "cors": {
            "allowedOrigins": ["https://portal.azure.com"]
          }
        },
        "clientAffinityEnabled": false,
        "virtualNetworkSubnetId": null,
        "functionsRuntimeAdminIsolationEnabled": false,
        "managedEnvironmentId": "[resourceId(resourceGroup().name, 'Microsoft.App/managedEnvironments', parameters('environmentName'))]",
        "workloadProfileName": "[parameters('workloadProfileName')]",
        "resourceConfig": "[parameters('resourceConfig')]"
      }
    },
    // Application Insights Component
    {
      "apiVersion": "2020-02-02-preview",
      "name": "webscrapper-function",
      "type": "microsoft.insights/components",
      "location": "[parameters('location')]",
      "tags": null,
      "dependsOn": [
        "[resourceId(resourceGroup().name, 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
      ],
      "properties": {
        "ApplicationId": "[parameters('name')]",
        "Request_Source": "IbizaWebAppExtensionCreate",
        "Flow_Type": "Redfield",
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId(resourceGroup().name, 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
      }
    },
    // Storage Account
    {
      "apiVersion": "2022-05-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [],
      "tags": null,
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "defaultToOAuthAuthentication": true
      }
    },
    // Managed Environment
    {
      "apiVersion": "2024-02-02-preview",
      "name": "[parameters('environmentName')]",
      "type": "Microsoft.App/managedEnvironments",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": null,
      "dependsOn": [
        "[resourceId(resourceGroup().name, 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
      ],
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId(resourceGroup().name, 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2020-08-01').customerId]",
            "sharedKey": "[listKeys(resourceId(resourceGroup().name, 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2020-08-01').primarySharedKey]"
          }
        },
        "workloadProfiles": [
          {
            "name": "Consumption",
            "workloadProfileType": "Consumption"
          }
        ]
      }
    },
    // Log Analytics Workspace
    {
      "apiVersion": "2020-08-01",
      "name": "[parameters('workspaceName')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "location": "[parameters('workspaceLocation')]",
      "dependsOn": [],
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "workspaceCapping": {}
      }
    },

    // Key Vault
    {
      "apiVersion": "2023-08-01-preview",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "type": "Microsoft.KeyVault/vaults",
      "properties": {
        "enabledForDeployment": false,
        "enabledForTemplateDeployment": false,
        "enabledForDiskEncryption": false,
        "enableRbacAuthorization": false,
        "accessPolicies": [
          {
            "tenantId": "[parameters('tenant')]",
            "objectId": "9431807c-c681-4320-9920-ca4120a31372",
            "permissions": {
              "secrets": ["get", "list", "set", "delete", "purge"],
              "keys": [
                "get",
                "list",
                "create",
                "import",
                "delete",
                "update",
                "backup",
                "restore",
                "recover",
                "purge"
              ],
              "certificates": [
                "get",
                "list",
                "create",
                "import",
                "update",
                "delete",
                "recover",
                "purge"
              ]
            }
          },
          {
            "tenantId": "[parameters('tenant')]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": ["get", "list"]
            }
          }
        ],
        "tenantId": "[parameters('tenant')]",
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "publicNetworkAccess": "Enabled",
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "networkAcls": {
          "defaultAction": "allow",
          "bypass": "None",
          "ipRules": [],
          "virtualNetworkRules": []
        }
      },
      "tags": {},
      "dependsOn": ["[resourceId('Microsoft.Web/sites', parameters('name'))]"]
    }
  ]
}
